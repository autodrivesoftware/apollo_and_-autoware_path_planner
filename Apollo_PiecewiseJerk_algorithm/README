
参考：https://github.com/LiJiangnanBit/Apollo_speed_planner
    https://blog.csdn.net/weixin_41399111/article/details/105826425
    https://www.cnblogs.com/liuzubing/p/11051390.html
    https://blog.csdn.net/weixin_41399111/article/details/106323799

Apollo piecewise_jerk算法主要包括两方面，路径规划和速度规划，最后组合成轨迹

路径规划: PIECEWISE_JERK_PATH_OPTIMIZER (QP)
速度规划: SPEED_HEURISTIC_OPTIMIZER (DP)
         PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER  (QP)


Apollo内部关于车辆速度曲线的规划，主要是涉及了几个阶段的主要任务表述:
    1.Speed_bounds_prior_decider:
    首先，将障碍物的轨迹映射到s-t graph，随后计算出障碍物的轨迹（prior过程，障碍物在速度方面不存在decision，因此此次计算轨迹是withoutdecision），并将其放置boundaries集合中，随后设置速度最大限制（沿规划好路径），最后，st_graph_data保存boundaries,speed_limit等.
    2.DP_ST_SPEED_OPTIMIZER：
    根据上述的boundaries，进行计算启发式速度曲线搜索，得到最优轨迹；
    3.SPEED_DECIDER：
    根据上述的speed曲线，来初步判断对障碍物的decision，其中行人需要特别处理，设置相应的决策行为；
    4.SPEED_BOUNDS_FINAL_DECIDER：
    重新计算障碍物stboundary，然后根据障碍物的decision，确定速度的边界；
    5.PIECEWISE_JERK_SPEED_OPTIMIZER
    基于osqp进行速度曲线的数值优化计算，得出最优曲线.


1. sudo apt-get install libgoogle-glog-dev
   sudo apt install coinor-libipopt-dev


2. 使用脚本安装IPOPT   // 注意每个电脑系统里面的IPOPT版本，从新安装
   sudo ./install_ipopt.sh Ipopt-3.12.7
   sudo ./install_ipopt_offline.sh Ipopt-3.12.7 #Ipopt-3.12.7 文件夹已经下载了，可以直接离线安装

3. 安装pandas
   pip install pandas
   sudo apt-get install python-pandas
   plot/plot.py  // 画图

4. 两个demo文件
   src/demo_PiecewiseJerkPathOptimizer.cpp
   src/demo_PiecewiseJerkSpeedOptimizer.cpp
  
5. 安装osqp

            // 先安装 osqp Version 0.5.0
               git clone https://github.com/osqp/osqp.git --recursive
               git checkout v0.5.0      
                     cd osqp
                        mkdir build
                        cd build
                        cmake -G "Unix Makefiles" ..
                        cmake --build .
                        make -j4
                        sudo make install

            // 再编译
               mkdir build
               cd build
               cmake ..
               make -j20

6. 运行 demo   ./build/PiecewiseJerkPathOptimizer
7. 画图   python3 plot.py  # plot目录下执行

   
   
